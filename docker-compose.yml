version: "0.1"

x-mysql-database-config-data:
  &mysql-connection-data
  environment:
    - SPRING_DATASOURCE_PLATFORM=mysql
    - MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}
    - MYSQL_DATABASE=passenger_db

x-postgresql-database-config-data:
  &postgesql-connection-data
  environment:
    - SPRING_DATASOURCE_PLATFORM=postgresql
    - POSTGRES_PASSWORD=${POSTGRESQL_PASSWORD}
    - POSTGRES_USER=${POSTGRESQL_USERNAME}
    - POSTGRES_DB=ride_db

x-config-eureka-server:
  &spring-config
  environment:
    - eureka.client.service-Url.defaultZone=http://eureka-server:8761/eureka

x-config-passenger-microservice:
  &spring-database-config
  environment:
    - eureka.client.service-Url.defaultZone=http://eureka-server:8761/eureka
    - spring.datasource.url=jdbc:mysql://mysqldb:3306/passenger_db

x-config-ride-microservice:
  &spring-postgres-ride-database-config
  environment:
    - spring.datasource.url=jdbc:postgresql://postgresql:5432/ride_db
    - eureka.client.service-Url.defaultZone=http://eureka-server:8761/eureka
    - spring.datasource.password=${POSTGRESQL_PASSWORD}
    - spring.datasource.username=${POSTGRESQL_USERNAME}

x-config-driver-microservice:
  &spring-postgres-driver-database-config
  environment:
    - spring.datasource.url=jdbc:postgresql://postgresql:5432/driver_db
    - eureka.client.service-Url.defaultZone=http://eureka-server:8761/eureka
    - spring.datasource.password=${POSTGRESQL_PASSWORD}
    - spring.datasource.username=${POSTGRESQL_USERNAME}

services:

  mysqldb:
    image: mysql:8.0
    env_file:
      - .env
    restart: always
    ports:
      - 3306:3306
    <<: *mysql-connection-data
    container_name: mysqldb
    networks:
      - app

  postgresql:
    image: postgres:16
    env_file:
      - .env
    restart: always
    ports:
      - 5432:5432
    <<: *postgesql-connection-data
    container_name: postgresql
    volumes:
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - app

  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: ./Dockerfile
    image: eurekaserver:latest
    env_file:
      - .env
    ports:
      - 8761:8761
    <<: *spring-config
    container_name: eureka-server
    networks:
      - app

  passenger-service:
    build:
      context: ./passenger-service
      dockerfile: ./Dockerfile
    image: passenger-service
    env_file:
      - .env
    ports:
      - 8081:8081
    depends_on:
      - mysqldb
    <<: *spring-database-config
    container_name: passenger_service
    networks:
      - app

  ride-service:
    build:
      context: ../ride-service
      dockerfile: ./Dockerfile
    image: ride-service
    env_file:
      - .env
    ports:
      - 8084:8084
    depends_on:
      - postgresql
    <<: *spring-postgres-ride-database-config
    container_name: ride_service
    networks:
      - app

  driver-service:
    build:
      context: ../driver-service
      dockerfile: ./Dockerfile
    image: driver-service
    env_file:
      - .env
    ports:
      - 8082:8082
    depends_on:
      - postgresql
    <<: *spring-postgres-driver-database-config
    container_name: driver-service
    networks:
      - app

  kafka:
    image: 'bitnami/kafka:3.7.0'
    container_name: kafka
    ports:
      - 29000:29000
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:29000,CONTROLLER://:29001
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29000
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:29001
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - app
    restart: always

networks:
  app:
    name: cab-aggregation

volumes:
  kafka_data:
